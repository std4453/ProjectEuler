package io.github.std4453.projecteuler;

import java.util.stream.IntStream;

/**
 * Problem #8: Largest product in a series<br />
 * The four adjacent digits in the 1000-digit number that have the greatest product are
 * {@code 9 × 9 × 8 × 9 = 5832}.<br />
 * <pre><code>
 * 73167176531330624919225119674426574742355349194934
 * 96983520312774506326239578318016984801869478851843
 * 85861560789112949495459501737958331952853208805511
 * 12540698747158523863050715693290963295227443043557
 * 66896648950445244523161731856403098711121722383113
 * 62229893423380308135336276614282806444486645238749
 * 30358907296290491560440772390713810515859307960866
 * 70172427121883998797908792274921901699720888093776
 * 65727333001053367881220235421809751254540594752243
 * 52584907711670556013604839586446706324415722155397
 * 53697817977846174064955149290862569321978468622482
 * 83972241375657056057490261407972968652414535100474
 * 82166370484403199890008895243450658541227588666881
 * 16427171479924442928230863465674813919123162824586
 * 17866458359124566529476545682848912883142607690042
 * 24219022671055626321111109370544217506941658960408
 * 07198403850962455444362981230987879927244284909188
 * 84580156166097919133875499200524063689912560717606
 * 05886116467109405077541002256983155200055935729725
 * 71636269561882670428252483600823257530420752963450
 * </code></pre>
 * Find the thirteen adjacent digits in the 1000-digit number that have the greatest
 * product. What is the value of this product?
 */
public class Problem008 {
	private static final int ADJACENTLY = 13;
	private static final String NUMBER =
			"73167176531330624919225119674426574742355349194934" +
					"96983520312774506326239578318016984801869478851843" +
					"85861560789112949495459501737958331952853208805511" +
					"12540698747158523863050715693290963295227443043557" +
					"66896648950445244523161731856403098711121722383113" +
					"62229893423380308135336276614282806444486645238749" +
					"30358907296290491560440772390713810515859307960866" +
					"70172427121883998797908792274921901699720888093776" +
					"65727333001053367881220235421809751254540594752243" +
					"52584907711670556013604839586446706324415722155397" +
					"53697817977846174064955149290862569321978468622482" +
					"83972241375657056057490261407972968652414535100474" +
					"82166370484403199890008895243450658541227588666881" +
					"16427171479924442928230863465674813919123162824586" +
					"17866458359124566529476545682848912883142607690042" +
					"24219022671055626321111109370544217506941658960408" +
					"07198403850962455444362981230987879927244284909188" +
					"84580156166097919133875499200524063689912560717606" +
					"05886116467109405077541002256983155200055935729725" +
					"71636269561882670428252483600823257530420752963450";

	public static void main(String[] args) {
		// Note that rangeClosed is used here. If ADJACENTLY = 13 and NUMBER.length() =
		// 13, then IntStream.range(0, NUMBER.length() - ADJACENTLY) will return an empty
		// stream, which is definitely the wrong result.
		IntStream.rangeClosed(0, NUMBER.length() - ADJACENTLY)  // starting indices
				.mapToLong(i -> IntStream.range(i, i + ADJACENTLY)  // 13 adjacent chars
						.mapToLong(index -> NUMBER.charAt(index) - '0')  // char -> int
						.reduce((a, b) -> a * b)  // multiply them together
						.orElseThrow(() -> new RuntimeException("???")))  // WTF
				.max()  // get the maximum
				.ifPresent(System.out::println);  // print the result

		// Answer: 23514624000
		// Complexity: O(length * adjacently)

		// Homework:
		// 1. How can you modify the program so that NUMBER is not a String but a
		// actual number?
		// (tips: Look into BigDecimal and BigInteger)

		// 2. This program is not yet quick enough. Imagine you're required to find the
		// greatest product of all adjacent 1000 digits in a 100,000 digits number, how
		// can you optimize it to achieve O(length)?
		// On my computer, the new algorithm is about 7 times faster than the current one.
	}
}
